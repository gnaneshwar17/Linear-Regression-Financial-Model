# -*- coding: utf-8 -*-
"""Linear Regression Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SQCYu6fkrQGd0RGaC1BOy2osBwsvP-pw
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import statsmodels.api as sm
import math
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error


from scipy import stats
from scipy.stats import kurtosis, skew

# %matplotlib inline

path =r"/content/oil_exxon.xlsx"
price_data = pd.read_excel(path)
#First 5 Rows , Index starts from 0
price_data.head()
#Date should be our Index
price_data.index=pd.to_datetime(price_data['date'])
price_data.head()

price_data.dtypes

new_column_names={'exon_price':'exxon price'}
price_data=price_data.rename(columns=new_column_names)
price_data.head()

#Missing the Values
# Drop the values
price_data.isna().any()
#Display Function
display(price_data.isna().any())
price_data=price_data.dropna()
display(price_data.isna().any())

#Building a Scatter Plot
x=price_data['exxon price']
y=price_data['oil_price']
plt.plot(x,y,'o',color='blue',label='Daily Price')
plt.title('Exon vs Oil Price')
plt.xlabel("Exon Mobile Stock")
plt.ylabel("Oil")
plt.legend()
plt.show()

price_data.corr()

#Statistical Summary
price_data.describe()

#Histogram Dataset
price_data.hist(grid=False,color='green')

#Kurtosis and Skewness
exxon_kurtosis=kurtosis(price_data['exxon price'],fisher=True)
display("Exxon Kurtosis :{:.2}".format(exxon_kurtosis))
oil_kurtosis=kurtosis(price_data['oil_price'],fisher=True)
display("Oil Kurtosis :{:.2}".format(oil_kurtosis))
exxon_skew=skew(price_data['exxon price'])
display("Exxon Skewness :{:.2}".format(exxon_skew))
oil_skew=skew(price_data['oil_price'])
display("Oil Skewness :{:.2}".format(oil_skew))

#Kurtosis Testing
display('Exon Mobiles')
display(stats.kurtosistest(price_data['exxon price']))
display('Oil')
display(stats.kurtosistest(price_data['oil_price']))
#Skew Testing
display('Exon Mobiles')
display(stats.skewtest(price_data['exxon price']))
display('Oil')
display(stats.skewtest(price_data['oil_price']))

# define our input variable (X) & output variable.
Y = price_data[['exxon price']]
X = price_data[['oil_price']]

# Split X and y into X_
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.30, random_state=1)

y_train

X_train=np.array(X_train).reshape(-1,1)
X_train

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(X_train,y_train)

# let's grab the coefficient of our model and the intercept.
intercept = lr.intercept_[0]
coefficient = lr.coef_[0][0]

print("The Coefficient for our model is {:.2}".format(coefficient))
print("The intercept for our model is {:.4}".format(intercept))

prediction =lr.predict([[67.33]])
predicted_value = prediction[0][0]
print("The predicted value is {:.4}".format(predicted_value))

# Get multiple predictions.
y_predict = lr.predict(X_test)

# Show the first 5 predictions
y_predict[:5]

# define our intput
X2 = sm.add_constant(X)
# create a OLS model.
model = sm.OLS(Y, X2)
# fit the data
est = model.fit()

est.conf_int()

est.pvalues

# calculate the mean squared error.
model_mse = mean_squared_error(y_test, y_predict)

# calculate the mean absolute error.
model_mae = mean_absolute_error(y_test, y_predict)

# calulcate the root mean squared error
model_rmse =  math.sqrt(model_mse)

# display the output
print("MSE {:.3}".format(model_mse))
print("MAE {:.3}".format(model_mae))
print("RMSE {:.3}".format(model_rmse))

model_r2 = r2_score(y_test, y_predict)
print("R^2: {:.2}".format(model_r2))

#Summary Of Model Output
print(est.summary())

(y_test - y_predict).hist(grid = False, color = 'lightgreen')
plt.title("Model Residuals")
plt.show()

plt.scatter(X_test, y_test,  color='orange', label = 'Price')
plt.plot(X_test, y_predict, color='darkviolet', linewidth = 3, linestyle= '-',label ='Regression Line')

plt.title("Linear Regression Exxon Mobile Vs. Oil")
plt.xlabel("Oil")
plt.ylabel("Exxon Mobile")
plt.legend()
plt.show()

# The coefficients
print('Oil coefficient:' + '\033[1m' + '{:.2}''\033[0m'.format(lr.coef_[0][0]))

# The mean squared error
print('Mean squared error: ' + '\033[1m' + '{:.4}''\033[0m'.format(model_mse))

# The mean squared error
print('Root Mean squared error: ' + '\033[1m' + '{:.4}''\033[0m'.format(math.sqrt(model_mse)))

# Explained variance score: 1 is perfect prediction
print('R2 score: '+ '\033[1m' + '{:.2}''\033[0m'.format(r2_score(y_test,y_predict)))

#Saving the Model for Future use
import pickle

# pickle the model.
with open('my_linear_regression.sav','wb') as f:
     pickle.dump(regression_model,f)

# load it back in.
with open('my_linear_regression.sav', 'rb') as pickle_file:
     regression_model_2 = pickle.load(pickle_file)

# make a new prediction.
regression_model_2.predict([[67.33]])